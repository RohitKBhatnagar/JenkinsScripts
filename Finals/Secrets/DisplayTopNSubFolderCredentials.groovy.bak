//Displays all credentials inside specific top level folder only
//But displays sub folder names before printing global-scoped and local-scoped
import com.cloudbees.plugins.credentials.Credentials
import com.cloudbees.hudson.plugins.folder.AbstractFolder;

import jenkins.*
import jenkins.model.*
import hudson.*
import hudson.model.*

import hudson.scm.*
import hudson.tasks.*
import com.cloudbees.hudson.plugins.folder.*

def topFolderName="ESS"

Set<Credentials> allCredentials = new HashSet<Credentials>()
Set<Credentials> folderCredentials = new HashSet<Credentials>()

def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(com.cloudbees.plugins.credentials.Credentials)

allCredentials.addAll(creds)
//folderCredentials(creds)

jen = Jenkins.instance

jen.getItems().each {
    if(it instanceof Folder)
    {
        if(it.name.equals(topFolderName))
        {
            println "Pulling all credentials including sub folders for ${it.name}"
            creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(com.cloudbees.plugins.credentials.Credentials, it)
            allCredentials.addAll(creds)
			folderCredentials.clear()
            processFolder(it, folderCredentials)
        }
    }
}

for (c in allCredentials) {
    println(c.id)
    if (c.properties.username) {
        println(' description: ' + c.description)
    }
    if (c.properties.username) {
        println(' username: ' + c.username)
    }
    if (c.properties.password) {
        println(' password: ' + c.password)
    }
    if (c.properties.passphrase) {
        println(' passphrase: ' + c.passphrase)
    }
    if (c.properties.secret) {
        println(' secret: ' + c.secret)
    }
    if (c.properties.privateKeySource) {
        println(' privateKey: ' + c.getPrivateKey())
    }
    println('')
}

void processFolder(Item folder, HashSet<Credentials> tempFolderCredentials)
{
    folder.getItems().each {
        if(it instanceof Folder)
        {
            println "================== Sub Folder - ${it.name} ============================="
            creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(com.cloudbees.plugins.credentials.Credentials, it)
            //allCredentials.addAll(creds)
			tempFolderCredentials.addAll(creds)
			printFolderCredentials(tempFolderCredentials)
			tempFolderCredentials.clear()
            processFolder(it, tempFolderCredentials)
        }
    }
}

void printFolderCredentials(HashSet<Credentials> myFolderCredentials)
{
	for (c in myFolderCredentials) {
		println(c.id)
		if (c.properties.username) {
			println(' description: ' + c.description)
		}
		if (c.properties.username) {
			println(' username: ' + c.username)
		}
		if (c.properties.password) {
			println(' password: ' + c.password)
		}
		if (c.properties.passphrase) {
			println(' passphrase: ' + c.passphrase)
		}
		if (c.properties.secret) {
			println(' secret: ' + c.secret)
		}
		if (c.properties.privateKeySource) {
			println(' privateKey: ' + c.getPrivateKey())
		}
		println('')
	}
}
