import java.text.SimpleDateFormat

def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS")
def startDate = new Date()
println "Start time : ${sdf.format(startDate)}"
//-------------------------------------------------

String strMaster = java.net.InetAddress.getLocalHost();
println "========================================================"
println "Displays all roles and members for all top level folders"
println ">>>>> CD Master - ${strMaster} <<<<<<<<<<<<<<<<<<<<"
println "========================================================"

//==============================================================
//Displays all members behind every top level folder
//==============================================
import nectar.plugins.rbac.groups.*;
import java.util.*;
import com.cloudbees.hudson.plugins.folder.AbstractFolder;

def strFinalRow = ""
def mFinal = [:]

def topFolderName="AccessManagement" //CD5 Folder

//def topItems = Jenkins.instance.getItemByFullName(topFolderName, AbstractFolder)
def topItems = Jenkins.instance.getItems()
topItems.eachWithIndex 
{
    itTop, iTopCount ->
    Map containers = new TreeMap();
    def strFolderRow = ""
    //println "${iTopCount} :: ${itTop.name}";
    strFolderRow = "${iTopCount}, ${itTop.name}"
    mFinal.put("Folder", itTop.name)
    //println("-----------------------------------------------");
    containers.put(Jenkins.instance.displayName, GroupContainerLocator.locate(Jenkins.instance.getItemByFullName(itTop.name, AbstractFolder)));
    for (i in Jenkins.instance.getItemByFullName(itTop.name, AbstractFolder).allItems) 
    {
      if (GroupContainerLocator.isGroupContainer(i.getClass())) 
      {
	GroupContainer g = GroupContainerLocator.locate(i);
        if (g != null) 
	  containers.put(Jenkins.instance.displayName + "/" + i.fullDisplayName, g);
      }
    }

    containers.eachWithIndex 
    {
        itC, itCount ->
    	int itCNo = 0
        for (c in itC) 
	{
	  itCNo++;
          if(c.value.groups.size() > 0)
          {
	    //println("DEBUG: Size of groups in containers - ${c.value.groups.size()}");
	    //println(c.key);

	    def lstFolderRoles = [:]
	    def lstRolePermissions = [:]
	    def lstRoleADGroups = [:]
	    def lstRoleADGroupMembers = [:]

	    int iGroupNo = 0
	    for (g in c.value.groups) 
	    {
		iGroupNo++
		def grpName
		def roleName
		grpName = g.name;
		//println("  " + g.name);   //https://javadoc.jenkins.io/plugin/cloudbees-folder/com/cloudbees/hudson/plugins/folder/Folder.html
		lstFolderRoles.put("Role#" + iGroupNo.toString(), g.name)
		//println("    Roles:");
		int iPermNo = 0
		for (r in g.roles) 
		{
		   iPermNo++
		   roleName = r
		   //println("      " + r + (g.doesPropagateToChildren(r) ? " (and children)" : " (pinned)"));
		   def strPermission = "${r}"
		   lstRolePermissions.put("Permission#" + iPermNo.toString(), r)
		} //Role Permissions
		
		lstFolderRoles.putAll(lstRolePermissions)
		mFinal.putAll(lstFolderRoles)
		//println("    Members:");

		int iADNo = 0
		for (a in g.membership) 
		{
		  iADNo++
		  lstRoleADGroups.put("Group#" + iADNo.toString(), a.id)
		  //Listing all members in any external groups
		  if(a instanceof nectar.plugins.rbac.assignees.ExternalGroupAssignee) 
		  {
			def iCount = 0;
			if(a.members.size() > 0)
			{
			   for (b in a.members) 
			   {
			      iCount++
			      //println "            ${iCount}, ${itTop.name}, ${grpName}, ${roleName}, ${a.id}, ${b}"
			      //println "      ${iTopCount}, ${iCount}, ${itTop.name}, ${grpName}, ${roleName}, ${a.id}, ${b}"
			      println "${itTop.name}, ${grpName}, ${roleName}, ${a.id}, ${b}"
			      lstRoleADGroupMembers.put("Member#" + iCount.toString(),b)
			   }
			}
			else
			   //println("      ${iTopCount}, ${itTop.name}, ${grpName}, ${roleName}, ${a.id}");
			   println("${itTop.name}, ${grpName}, ${roleName}, ${a.id}");
			lstRoleADGroups.putAll(lstRoleADGroupMembers)
		  }
		}
		mFinal.putAll(lstRoleADGroups)
              } //Role Names
          }
        }
    }
    //println mFinal
}


//--------------------------------------------------
def endDate = new Date()
println "End time: ${sdf.format(endDate)}"

use(groovy.time.TimeCategory) 
{
    def duration = endDate - startDate
      print "Elapsed time: Days: ${duration.days}, Hours: ${duration.hours}, Minutes: ${duration.minutes}, Seconds: ${duration.seconds}"
}

return null;

